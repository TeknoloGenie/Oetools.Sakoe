<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
 
  <!-- Setting properties -->
  <PropertyGroup>
    <ReleaseZipDirectory>..\bin</ReleaseZipDirectory>
    <ReleaseZipNameSuffix Condition=" '$(TargetFramework)'=='netcoreapp2.0' ">-dotnetcore2.0</ReleaseZipNameSuffix>
    <ReleaseZipName>$(ReleaseArtifactName)$(ReleaseZipNameSuffix).zip</ReleaseZipName>
  </PropertyGroup>

  <Target Name="ZipRelease" AfterTargets="CopyOutputNetFramework;CopyOutputNetstandard" Condition=" '$(CopyOutputDone)'=='true' ">
    <ItemGroup>
      <ZipFiles Include="$(ReleaseBinPath)\*" />
    </ItemGroup>
    <MakeDir Directories="$(ReleaseDirectory)"/>
    <Zip
      InputFileNames="@(ZipFiles)"
      OutputFileName="$(ReleaseZipDirectory)\$(ReleaseZipName)"
      OverwriteExistingFile="true" />
    <Message Importance="high" Text="[INFO] Zipping %0A  @(ZipFiles, '%0A  ') %0A  -> into $(ReleaseZipDirectory)\$(ReleaseZipName)"/>
  </Target>


  <!-- defines the Zip task -->
  <UsingTask TaskName="Zip" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <InputFileNames ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <OutputFileName ParameterType="System.String" Required="true" />
      <OverwriteExistingFile ParameterType="System.Boolean" Required="false" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.IO.Compression" />
      <Using Namespace="System.IO.Compression" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[        
        const int BufferSize = 64 * 1024;
 
        var buffer = new byte[BufferSize];
        var fileMode = OverwriteExistingFile ? FileMode.Create : FileMode.CreateNew;
 
        using (var outputFileStream = new FileStream(OutputFileName, fileMode))
        {
          using (var archive = new ZipArchive(outputFileStream, ZipArchiveMode.Create))
          {
            foreach (var inputFileName in InputFileNames.Select(f => f.ItemSpec))
            {
              var archiveEntry = archive.CreateEntry(Path.GetFileName(inputFileName));
 
              using (var fs = new FileStream(inputFileName, FileMode.Open))
              {
                using (var zipStream = archiveEntry.Open())
                {
                  int bytesRead = -1;
                  while ((bytesRead = fs.Read(buffer, 0, BufferSize)) > 0)
                  {
                    zipStream.Write(buffer, 0, bytesRead);
                  }
                }
              }
            }
          }
        }        
      ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>